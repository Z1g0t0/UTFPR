O programa fork-print.c inicializa uma variável inteira x com o valor 0, e logo em seguida há uma chamada para a função fork(), criando assim um processo filho, a qual em conjunto com o processo pai printa seu pid correspondente e o valor atual de x. A variável x é neste momento sendo compartilhada em ambos os processos uma vez que nenhum processo executou uma operação de escrita sobre o valor de x. Assim que chega na última condição de if, o processo pai espera pelo término do processo filho pela chamada a função wait(), e o processo filho então faz uma operação de escrita sobre a variável x, incrementando-a, e após sair do condicional if printa seu valor correspondente como sendo 1. Ao realizar a operação de escrita, a variável x deixou de ser compartilhada entre os dois processos e então passou a possuir um valor distinto entre os processos pai e filho, e por isso, o processo pai, ao finalizar, printa o valor original de x como sendo 0.
